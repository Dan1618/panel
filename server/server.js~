"use strict";

//const mongodb = require('mongodb');
const MongoClient = mongodb.MongoClient;
const express = require('express');
const app = express();
const path = require("path");
const bcrypt = require('bcryptjs');
const bodyParser = require("body-parser");
const jwt = require("jsonwebtoken");
const secret = process.env.JWT_SECRET || "CHANGE_THIS_TO_SOMETHING_RANDOM"; // super secret
var db = null;
const url = 'mongodb://localhost:27017/dmpanel';

//this is for handling req.body objects
app.use(bodyParser.json()); 	
app.use('/', express.static(path.resolve("../client/app")));
app.use('/', express.static(path.resolve("../client/bower_components")));
app.use('/', express.static(path.resolve("../client/tmp")));

MongoClient.connect(url, function(err, database) {
    if(err) {console.log('error occured: ' + err)}
    db = database;
})

///////////////////////--registrationAPI

function checkUserExists(user) {
    return new Promise(function(resolve, reject){
        //TODO: handleeror if rejected
        db.collection('appUsers').find({ "email" : user }).toArray(function(err, data){
            err && reject(err);
            resolve(data);
        })
    })
}

function insertToDB(collection, data) {
    return new Promise(function(resolve, reject){
        //TODO: handleeror if no collection, collection must be string, data must be json ...
        //TODO: develop the function to insertMany
        db.collection(collection).insertOne(data, function(err, result) {
            err && reject(err);
            resolve(result);
        })
    })
}

app.post('/register', function(req, res) {
    
    let newUser = req.body;
    let paswd = newUser.paswd;
    let username = newUser.email;
    
    checkUserExists(username).then(function(userData){
        if (!userData.length) {
            let salt = bcrypt.genSaltSync(10);
            let hash = bcrypt.hashSync(paswd, salt);
            newUser.paswd = hash;
            return insertToDB('appUsers', newUser);
        } else {
            res.end("userExists");
            return false;
        }
    }).then(function(data){
        if (data === false) {return;}
        //TODO: if data
        let uid = data.ops[0]._id;
        let token = generateToken(uid);
        let dataToResponse = data.ops[0];
        dataToResponse.token = token;
        res.end(JSON.stringify(dataToResponse));
    })
})

function generateToken(UID) {
  var token = jwt.sign({
  //TODO: regulate expire token date
    auth:  UID
  }, secret);

  return token;
}

///////////////////////--!registrationAPI

////////////////////////loginAPI

app.post('/tokenStart', function(req, res) {
    let decoded = jwt.verify(req.body.token, secret);
    //decoded = user _id
    decoded = decoded.auth;
    let o_id = new mongodb.ObjectID(decoded);
    
    db.collection('appUsers').find({"_id":o_id}).toArray(function(err, data){
        if (data.length) {
            res.end(JSON.stringify(data));
        } else {
            res.end('no user decripted');
        }
    })
})

app.post('/login', function(req, res) {
    let paswd = req.body.paswd;
    let username = req.body.email;
    
    checkUserExists(username).then(function(userData) {
        if (!userData.length) {
            res.end("noSuchUser");
        } else {
            if( bcrypt.compareSync(paswd, userData[0].paswd) ) { //password ok
                //TODO: if data
                let uid = userData[0]._id;
                let token = generateToken(uid);
                let dataToResponse = userData[0];
                dataToResponse.token = token;
                //TODO: remove hashed password, _id from dataToResponse
                res.end(JSON.stringify(dataToResponse));
            } else { // password nok
                res.end("paswdIncorrect");
            }
        }
    })
})

//////////////////////////!loginAPI

app.post('/doEditEmp', function(req, res) {
    empToEdit = req.body;
    db.collection('empList').update({
        _id: new mongodb.ObjectID(empToEdit.emp._id)
    },{
        name: empToEdit.updatedEmp.name,
        surname: empToEdit.updatedEmp.surname,
        job: empToEdit.updatedEmp.job,
        loc: empToEdit.updatedEmp.loc
    });
    res.end();
})

app.post('/removeEmp', function(req, res){
    let empToRemove = req.body;
    db.collection('empList').remove({
        _id: new mongodb.ObjectID(empToRemove._id)
    }, true);
    res.end();
})

app.post('/addEmp', function(req, res){
    let emp = req.body;
    db.collection('empList').insertOne(emp, function(err, result){
        res.end();
    })
})

app.get('/getEmpList', function(req, res) {
    db.collection('empList').find().toArray(function(err, data){
        res.end(JSON.stringify(data));
    })
})

var server = app.listen(7001, function () {
  let host = server.address().address;
  let port = server.address().port;
  console.log("Example app listening at http://%s:%s", host, port);
})
